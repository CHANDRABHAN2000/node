{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getList","state","list","map","item","i","react_default","a","createElement","className","key","onClick","setStatus","id","Item","delete","bind","assertThisInitialized","l","obj","Status","push","console","log","setState","e","target","value","index","indexOf","event","del","splice","_this2","onChange","getItem","addToList","onKeyPress","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oMCyGzBC,gEA/Fb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA4BVQ,QAAQ,WAcN,OAZQP,EAAKQ,MAAMC,KAAKC,IAAI,SAACC,EAAKC,GAG9B,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAgBC,IAAKL,GACjCC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,QAAQE,QAAS,WAAKlB,EAAKmB,UAAUR,IAAQS,GAAIR,GAChED,EAAKU,MAERR,EAAAC,EAAAC,cAAA,UAAQG,QAASlB,EAAKsB,OAAQF,GAAIR,GAAlC,SArCNZ,EAAKQ,MAAM,GACXR,EAAKQ,MAAMC,KAAK,GAChBT,EAAKQ,MAAMG,KAAK,GAChBX,EAAKsB,OAAOtB,EAAKsB,OAAOC,KAAZtB,OAAAuB,EAAA,EAAAvB,CAAAD,IALIA,2EAUhB,IAAIyB,EAAEtB,KAAKK,MAAMC,KACbiB,EAAI,CAACL,KAAKlB,KAAKK,MAAMG,KAAKgB,QAAO,GACrCF,EAAEG,KAAKF,GACPG,QAAQC,IAAIL,GACZtB,KAAK4B,SAAS,CACZtB,KAAKgB,EACLd,KAAK,KAGTkB,QAAQC,IAAI3B,KAAKK,MAAMC,sCAGfuB,GACNH,QAAQC,IAAIE,EAAEC,OAAOC,OACrB/B,KAAK4B,SAAS,CACZpB,KAAKqB,EAAEC,OAAOC,0CAoBVvB,GACR,IAAIC,EAAGT,KAAKK,MAAMC,KACd0B,EAAOvB,EAAEwB,QAAQzB,GACrBkB,QAAQC,IAAIK,GACZvB,EAAEe,QAAQf,EAAEe,OAEZxB,KAAK4B,SAAS,CACZJ,OAAOf,IAETiB,QAAQC,IAAIlB,kCAEPyB,GACL,IAAIjB,EAAGiB,EAAMJ,OAAOb,GACpBS,QAAQC,IAAIV,GACZ,IAAIkB,EAAInC,KAAKK,MAAMC,KACnB6B,EAAIC,OAAOnB,EAAG,GACdjB,KAAK4B,SAAS,CACZtB,KAAK6B,qCAQC,IAAAE,EAAArC,KACN,OAAMU,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,aACCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAAayB,SAAU,SAACT,GAAKQ,EAAKE,QAAQV,MAC3DnB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaE,QAAS,WAAKsB,EAAKG,aAAcC,WAAY,WAAKJ,EAAKG,cAAtF,QAEA9B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,cAEAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACdb,KAAKI,oBAnFOsC,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.df092934.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { tsImportEqualsDeclaration, tsIndexSignature } from '@babel/types';\nimport papercss from 'papercss/dist/paper.css'\nimport ReactSwap from 'react-swap';\nimport Progress from 'react-progressbar';\nimport Calendar from 'react-calendar';\nclass App extends React.Component {\n  \n  constructor(props){\n    super(props);\n    this.state={};\n    this.state.list=[];\n    this.state.item=\"\";\n    this.delete=this.delete.bind(this);\n   \n  }\n  \n  addToList(){\n    let l=this.state.list;\n    let obj={Item:this.state.item,Status:false};\n    l.push(obj);\n    console.log(l);\n    this.setState({\n      list:l,\n      item:\"\"\n                \n    })\n  console.log(this.state.list)\n  }\n  \n  getItem(e){\n    console.log(e.target.value);\n    this.setState({\n      item:e.target.value\n    })    \n  \n  }\ngetList=()=>{\n  let arr=[];\n    arr = this.state.list.map((item,i)=>{\n      //console.log(item.Item);\n       \n      return(\n        <li className=\"row list item\" key={i}>\n          <button className=\"col-8\" onClick={()=>{this.setStatus(item)}} id={i}>\n            {item.Item}\n          </button>\n          <button onClick={this.delete} id={i}>X</button>\n        </li>\n      )\n    })\n  return arr;\n}\nsetStatus(item){\n  let i= this.state.list;\n  let index= i.indexOf(item);\n  console.log(index);\n  i.Status=!i.Status;\n  \n  this.setState({\n    Status:i\n  })\n  console.log(i)  \n}\ndelete(event){\n  var id=event.target.id;\n  console.log(id);\n  let del=this.state.list;\n  del.splice(id,1) ; \n  this.setState({\n    list:del\n\n  })\n}\n \n\n  \n\n  render(){\n    return<div>\n      <h1 className=\"font\">TODO LIST</h1>\n       <div className=\"row style1\">\n     <input className=\"col-6 font\" onChange={(e)=>{this.getItem(e)} }></input>\n     <button className=\"col-5 msg1\" onClick={()=>{this.addToList()}} onKeyPress={()=>{this.addToList()}}>Add</button>\n     </div>\n     <h3 className=\"font \">List Items</h3>\n     \n     <div className=\"row\">\n      <ul className=\"col-12 item\">\n     {this.getList()}\n     </ul> \n     \n     \n     </div>\n     \n     </div>\n     \n  }\n  \n  \n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}